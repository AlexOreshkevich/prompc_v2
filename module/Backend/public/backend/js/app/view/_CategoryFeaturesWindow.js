/*
 * File: js/app/view/CategoryFeaturesWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('App.view.CategoryFeaturesWindow', {
    extend: 'Ext.window.Window',

    height: 405,
    id: 'categoryFeaturesWindow',
    itemId: 'categoryFeaturesWindow',
    width: 574,
    layout: {
        type: 'fit'
    },
    title: 'Характеристики категории:',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    border: 0,
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    bodyPadding: 10,
                    header: false,
                    title: 'My Form',
                    items: [
                        {
                            xtype: 'tabpanel',
                            flex: 1,
                            activeTab: 0,
                            items: [
                                {
                                    xtype: 'panel',
                                    layout: {
                                        type: 'fit'
                                    },
                                    title: 'Все',
                                    items: [
                                        {
                                            xtype: 'treepanel',
                                            border: 0,
                                            id: 'allFeaturesTreePanel',
                                            stateEvents: [
                                                'collapsenode',
                                                'expandnode'
                                            ],
                                            stateful: true,
                                            header: false,
                                            title: 'My Tree Panel',
                                            store: 'Tree.FeatureGroup',
                                            displayField: 'title',
                                            rootVisible: false,
                                            viewConfig: {
                                                getRowClass: function(record, rowIndex, rowParams, store){
                                                    return record.get("inherited") ? "row-inherited" : "row-self";
                                                },
                                                border: 0,
                                                plugins: [
                                                    Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
                                                        ptype: 'treeviewdragdrop'
                                                    })
                                                ],
                                                listeners: {
                                                    beforedrop: {
                                                        fn: me.onTreedragdroppluginBeforeDrop,
                                                        scope: me
                                                    }
                                                }
                                            },
                                            dockedItems: [
                                                {
                                                    xtype: 'toolbar',
                                                    dock: 'bottom',
                                                    items: [
                                                        {
                                                            xtype: 'button',
                                                            text: 'Добавить',
                                                            menu: {
                                                                xtype: 'menu',
                                                                items: [
                                                                    {
                                                                        xtype: 'menuitem',
                                                                        id: 'newFeatureGroup-btn',
                                                                        text: 'Группу'
                                                                    },
                                                                    {
                                                                        xtype: 'menuitem',
                                                                        id: 'newFeature-btn',
                                                                        text: 'Характеристику'
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            xtype: 'button',
                                                            id: 'deleteFeature-btn',
                                                            text: 'Удалить',
                                                            listeners: {
                                                                click: {
                                                                    fn: me.onDeleteBtnClick,
                                                                    scope: me
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            selModel: Ext.create('Ext.selection.RowModel', {

                                            }),
                                            listeners: {
                                                beforeitemdblclick: {
                                                    fn: me.onAllFeaturesTreePanelBeforeItemDblClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    hidden: true,
                                    layout: {
                                        align: 'stretch',
                                        type: 'hbox'
                                    },
                                    title: 'Наследуемые'
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            hidden: true,
                            items: [
                                {
                                    xtype: 'tbfill'
                                },
                                {
                                    xtype: 'button',
                                    text: 'Сохранить',
                                    type: 'submit',
                                    listeners: {
                                        click: {
                                            fn: me.onSubmitButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: 'Отмена',
                                    type: 'reset',
                                    listeners: {
                                        click: {
                                            fn: me.onCancelButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onTreedragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropFunction, options) {
        var nodeUid = data.records[0].data.uid;
        var targetUid = overModel.data.uid;
        // don't allow to move features between groups and move groups into other groups
        if(dropPosition === 'append' || data.records[0].data.parentId !== overModel.data.parentId) {
            return false;
        } else {
            var items = [];
            data.records[0].parentNode.childNodes.forEach(function(item) {
                items.push(item.data.uid);
            } );
            if(data.records[0].parentNode.data.id === 'root') {
                url = 'http://dev2.prom-pc.ru/zadmin/index/featuregroup-move';
            } else {
                url = 'http://dev2.prom-pc.ru/zadmin/index/feature-move';
            }
            Ext.Ajax.request({
                method: 'post',
                url: url,
                params: { nodeUid: nodeUid, targetUid: targetUid, position: dropPosition},
                success: Ext.bind(function(response) {
                    var resultObj = Ext.JSON.decode(response.responseText);
                    if(resultObj.result !== "success") {
                        Ext.Msg.alert('Ошибка', 'Неизветсная ошибка!' );
                    }
                }, this)
            });

            return true;
        }
    },

    onDeleteBtnClick: function(button, e, options) {

        Ext.Msg.confirm('Удаление', 'Удалить запись?', function(btn) {
            if(btn === 'yes') {

                var selection = Ext.getCmp('allFeaturesTreePanel').getSelectionModel().getSelection()[0];
                var url = 'http://dev2.prom-pc.ru/zadmin/index/';
                if(selection.data.leaf) {
                    url += 'save-feature';
                } else {
                    url += 'save-feature-group';
                }

                Ext.Ajax.request({
                    url: url,
                    method: 'post',
                    params: { uid: selection.data.uid, deleted: 1},
                    success: Ext.bind(function() {
                        selection.remove();
                    }, this)
                });
            }

        });  

    },

    onAllFeaturesTreePanelBeforeItemDblClick: function(tablepanel, record, item, index, e, options) {
        var selection = Ext.getCmp("categoryTree").getSelectionModel().getSelection();

        if(record.data.leaf) {
            var groupsStore = Ext.getStore("FeatureGroupsStore");
            groupsStore.getProxy().extraParams.pid = selection[0].data.uid;
            groupsStore.reload();

            var variantsStore = Ext.getStore('FeatureVariantsStore');
            variantsStore.getProxy().extraParams.featureId = record.data.uid;
            variantsStore.load();
            storeName = 'App.store.FeaturesStore';
            windowName = "App.view.FeatureWindow";
        } else {
            storeName = 'App.store.FeatureGroupsStore';
            windowName = "App.view.FeatureGroupWindow";
        }

        Ext.define('App.store.tempStore', {
            extend: storeName,
            constructor: function(cfg) {
                var me = this;
                cfg = cfg || {};
                me.callParent([Ext.apply({
                    autoLoad: false,
                    storeId: 'tempStore'
                }, cfg)]);
            }

        });


        var store = Ext.create('App.store.tempStore');

        store.getProxy().extraParams.uid = record.data.uid;

        store.on('load', function() {
            var window = Ext.create(windowName);
            if(!this.first().data.pid) {
                this.first().set('pid', selection[0].data.uid);
            }
            window.down("form").loadRecord(this.first());
            window.show();
        });
        store.load();
        return false;
    },

    onSubmitButtonClick: function(button, e, options) {

    },

    onCancelButtonClick: function(button, e, options) {
        button.up("window").destroy();
    }

});