/*
 * File: js/app/view/grid/Abstract.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('App.view.grid.Abstract', {
    extend: 'Ext.grid.Panel',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
                        {
                            xtype: 'button',
                            text: 'Добавить',
                            itemId: 'button.Add'
                        },
                        {
                            xtype: 'button',
                            text: 'Обновить',
                            itemId: 'button.Refresh'
                        }
                    ]
                }
            ],
            viewConfig: {
                autoShow: false,
                disabled: false,
                frame: false,
                loadingCls: '',
                loadingText: 'Загрузка данных...',
                plugins: [
                    Ext.create('Ext.grid.plugin.DragDrop', {
                        ptype: 'gridviewdragdrop'
                    })
                ]
            },
            columns: [
                {
                    xtype: 'numbercolumn',
                    disabled: false,
                    hidden: true,
                    layout: {
                        type: 'fit'
                    },
                    dataIndex: 'id',
                    text: 'Uid'
                },
                {
                    xtype: 'templatecolumn',
                    tpl: [
                        '<!--<img src="preview/{preview_filename}"> -->'
                    ],
                    text: 'Фото'
                },
                {
                    xtype: 'gridcolumn',
                    width: 190,
                    dataIndex: 'title',
                    flex: 1,
                    text: 'Title'
                }
            ],
            selModel: Ext.create('Ext.selection.RowModel', {
                listeners: {
                    select: {
                        fn: me.onRowselectionmodelSelect1,
                        scope: me
                    }
                }
            }),
            listeners: {
                edit: {
                    fn: me.onGridpanelEdit,
                    delay: 1000,
                    scope: me
                }
            },
            plugins: [
                Ext.create('Ext.grid.plugin.CellEditing', {
                    ptype: 'cellediting',
                    clicksToEdit: 1,
                    triggerEvent: 'cellclick'
                })
            ]
        });

        me.callParent(arguments);
    },

    onRowselectionmodelSelect1: function(rowmodel, record, index, options) {

    },

    onGridpanelEdit: function(editor, e, options) {
        var window = Ext.create("App.view.ProductWindow");
        window.setTitle('['+record.data.uid+'] '+record.data.name);

        /*var store = Ext.getStore("ProductsStore");
        store.getProxy().extraParams.productId = 2;
        store.load();
        var r = store.data.first();*/
        Ext.define('Product', {
            extend: 'Ext.data.Model',
            fields: ['name','uid', 'code', 'short_description','full_description', 'seo_name',
            'page_title', 'meta_keywords', 'meta_description', 'current_price', 'current_currency', 'fix_price',
            'current_stock', 'fix_stock', 'price_updated', 'stock_updated'],
            proxy: {
                type: 'ajax',
                url: 'http://dev2.prom-pc.ru/zadmin/index/product',
                reader: { root: 'data' }
            }

        });

        var Product = Ext.ModelManager.getModel('Product');
        Product.load(record.data.uid, {
            success: function(product) {
                //console.log(product);
                Ext.getCmp('productForm').getForm().loadRecord(product);

            },
            failure: function() {
                console.log('failure!');
            }
        });


        //Ext.getCmp("productForm").getForm().loadRecord(record);

        var supplierDataStore = Ext.getStore("ProductSupplierDataStore");
        supplierDataStore.getProxy().extraParams = { productId: record.data.uid };
        supplierDataStore.load();

        var featuresTab = Ext.getCmp("featuresTab");
        featuresTab.removeAll();

        var featuresStore = Ext.getStore("ProductFeaturesTreeStore");
        featuresStore.getProxy().extraParams = { productId: record.data.uid };
        featuresStore.on('load', function() {
            console.log('Store loaded');
            Ext.Ajax.request({
                url: 'http://dev2.prom-pc.ru/zadmin/index/features-variants',
                method: 'get',
                params: { categoryId: Ext.getCmp("categoryTree").getSelectionModel().getSelection()[0].data.uid},
                success: Ext.bind(function(response) {
                    var variantsArr = Ext.JSON.decode(response.responseText);

                    featuresStore.tree.root.childNodes.forEach(function(gItem) {
                        if(gItem.childNodes.length > 0) {
                            var group = Ext.create('Ext.form.FieldSet', {
                                collapsible: true,
                                title: gItem.data.title,
                                margin: '5 10'
                            });

                            gItem.childNodes.forEach(function(fItem) {
                                var feature = {};
                                switch(fItem.data.type) {
                                    case 'boolean':
                                    feature = {
                                        items: [
                                        {
                                            xtype: 'radiofield',
                                            inputValue: true,
                                            boxLabel: 'Есть',
                                            name: 'features['+fItem.data.uid+']',
                                            checked: fItem.data.value === '1',
                                            margin: '0 20 0'
                                        },
                                        {
                                            xtype: 'radiofield',
                                            inputValue: false,
                                            boxLabel: 'Нет',
                                            name: 'features['+fItem.data.uid+']',
                                            checked: fItem.data.value === '0',
                                            margin: '0 20 0'
                                        },
                                        {
                                            xtype: 'radiofield',
                                            inputValue: null,
                                            boxLabel: 'Не указано',
                                            name: 'features['+fItem.data.uid+']',
                                            checked: fItem.data.value === ''
                                        }
                                        ],                                            
                                        xtype: 'radiogroup',
                                        fieldLabel: fItem.data.title,
                                        value: fItem.data.value,
                                        layout: 'hbox',
                                        labelWidth: 180
                                    };
                                    break;
                                    case 'select':

                                    variantsArr[fItem.data.uid].unshift({uid: 0, value: '<Не указано>'});
                                    var store = Ext.create('Ext.data.ArrayStore', {
                                        autoDestroy: true,
                                        idIndex: 0,
                                        fields: [
                                        'uid',
                                        'value'
                                        ],
                                        proxy: {
                                            type: 'memory',
                                            reader: {
                                                type: 'json'
                                            }
                                        },
                                        data: variantsArr[fItem.data.uid]
                                    });
                                    feature = {
                                        xtype: 'combobox',
                                        store: store,
                                        fieldLabel: fItem.data.title,
                                        valueField: 'uid',
                                        displayField: 'value',
                                        name: 'features['+fItem.data.uid+']',
                                        value: fItem.data.variant_id || 0,
                                        editable: false,
                                        grow: true,
                                        labelWidth: 180,
                                        queryMode: 'local'
                                    };
                                    break;
                                    case 'multiselect':
                                    feature = {
                                        xtype:'fieldcontainer',
                                        layout:{
                                            align:'stretch',
                                            type:'vbox'
                                        },
                                        fieldLabel:fItem.data.title,
                                        labelWidth: 100,
                                        items:[
                                        {
                                            xtype:'checkboxfield',
                                            anchor:'100%',
                                            hideLabel:true,
                                            boxLabel:'Не заполнено',
                                            checked:true,
                                            listeners: {
                                                change: {
                                                    fn: function(field, newValue, oldValue, options) {
                                                        field.next().setDisabled(newValue);
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            xtype:'checkboxgroup',
                                            disabled:true,
                                            width:150,
                                            fieldLabel:'Label',
                                            hideLabel:true,
                                            columns:3,
                                            vertical:false,
                                            items:[]
                                        }
                                        ]
                                    };

                                    if(fItem.data.variants instanceof Object) {
                                        feature.items[0].checked = false;
                                        feature.items[1].disabled = false;
                                    }

                                    variantsArr[fItem.data.uid].forEach(function (i) {
                                        feature.items[1].items.push({
                                            xtype:'checkboxfield',
                                            hideLabel:true,
                                            checked: fItem.data.variants[i.uid] === '1',
                                            boxLabel:i.value,
                                            inputValue:1,
                                            uncheckedValue:0,
                                            name:'features[' + fItem.data.uid + '][variants][' + i.uid + ']'
                                        });

                                    });

                                    break;
                                    case 'numeric':
                                    feature = {
                                        xtype: 'numberfield',
                                        fieldLabel: fItem.data.title,
                                        name: 'features['+fItem.data.uid+']',
                                        value: fItem.data.value,
                                        labelWidth: 180,
                                        size: 8

                                    };
                                    break;
                                }
                                group.add(feature);
                            });

                            featuresTab.add(group);
                        }

                    });

                }, this)
            });

        }, this, { single: true } );

            featuresStore.load();
            window.show();

    }

});